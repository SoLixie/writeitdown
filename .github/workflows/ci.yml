name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-backend:
    name: Validate Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Check for vulnerable dependencies
      working-directory: ./backend
      run: npm audit --audit-level high || true  # Continue even if audit fails
      
    - name: Run basic tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        JWT_SECRET: test-secret-for-ci
        
    - name: Verify server starts
      working-directory: ./backend
      run: |
        echo "🔧 Testing server startup..."
        
        # Function to check if port is available
        check_port() {
          netstat -tuln 2>/dev/null | grep -q ":$1 " && return 1 || return 0
        }
        
        # Function to find and kill process using port
        kill_port_process() {
          local pid=$(lsof -ti:$1 2>/dev/null)
          if [ ! -z "$pid" ]; then
            echo "⚠️ Killing existing process $pid on port $1"
            kill -9 $pid 2>/dev/null || true
            sleep 2
          fi
        }
        
        # Try multiple ports in case some are occupied
        for PORT in 3001 3002 3003 3004; do
          echo "Trying port $PORT..."
          
          # Kill any existing process on this port
          kill_port_process $PORT
          
          # Check if port is available
          if check_port $PORT; then
            echo "✅ Port $PORT is available"
            SELECTED_PORT=$PORT
            break
          else
            echo "❌ Port $PORT is occupied, trying next..."
          fi
        done
        
        if [ -z "$SELECTED_PORT" ]; then
          echo "❌ All test ports are occupied"
          exit 1
        fi
        
        # Start server in background with specific port
        echo "🚀 Starting server on port $SELECTED_PORT..."
        PORT=$SELECTED_PORT node server.js > server.log 2>&1 &
        SERVER_PID=$!
        
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to start with retries
        MAX_RETRIES=10
        RETRY_COUNT=0
        SERVER_READY=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          sleep 3
          
          # Check if server process is still running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ Server process died. Server logs:"
            cat server.log
            exit 1
          fi
          
          # Check if health endpoint responds
          if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:$SELECTED_PORT/api/health | grep -q "200"; then
            echo "✅ Server is ready and responding on port $SELECTED_PORT"
            SERVER_READY=true
            break
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "⏳ Waiting for server to start... ($RETRY_COUNT/$MAX_RETRIES)"
        done
        
        if [ "$SERVER_READY" = false ]; then
          echo "❌ Server failed to become ready within timeout"
          echo "Server logs:"
          cat server.log
          # Try to kill the server if it's still running
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        fi
        
        # Test a few API endpoints
        echo "🧪 Testing API endpoints..."
        
        # Test health endpoint
        HEALTH_RESPONSE=$(curl -s http://localhost:$SELECTED_PORT/api/health)
        echo "Health check: $HEALTH_RESPONSE"
        
        # Test auth endpoint (should return 400 for missing fields, not 500)
        AUTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:$SELECTED_PORT/api/auth/login)
        echo "Auth endpoint status: $AUTH_RESPONSE"
        
        if [ "$AUTH_RESPONSE" = "500" ]; then
          echo "❌ Auth endpoint returned 500 - server error"
          cat server.log
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        fi
        
        echo "✅ All server tests passed!"
        
        # Stop the server
        echo "🛑 Stopping server..."
        kill $SERVER_PID 2>/dev/null || true
        sleep 2
        
        # Verify server stopped
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "⚠️ Server still running, forcing kill..."
          kill -9 $SERVER_PID 2>/dev/null || true
        fi
        
  validate-frontend:
    name: Validate Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file structure
      run: |
        echo "📁 Checking file structure..."
        
        # Backend files
        [ -f "./backend/package.json" ] && echo "✅ backend/package.json" || { echo "❌ backend/package.json missing"; exit 1; }
        [ -f "./backend/server.js" ] && echo "✅ backend/server.js" || { echo "❌ backend/server.js missing"; exit 1; }
        [ -f "./backend/routes/auth.js" ] && echo "✅ auth.js" || { echo "❌ auth.js missing"; exit 1; }
        [ -f "./backend/routes/entries.js" ] && echo "✅ entries.js" || { echo "❌ entries.js missing"; exit 1; }
        [ -f "./backend/routes/users.js" ] && echo "✅ users.js" || { echo "❌ users.js missing"; exit 1; }
        [ -f "./backend/middleware/auth.js" ] && echo "✅ auth middleware" || { echo "❌ auth middleware missing"; exit 1; }
        
        # Frontend files
        [ -f "./frontend/index.html" ] && echo "✅ index.html" || { echo "❌ index.html missing"; exit 1; }
        [ -f "./frontend/register.html" ] && echo "✅ register.html" || { echo "❌ register.html missing"; exit 1; }
        [ -f "./frontend/dashboard.html" ] && echo "✅ dashboard.html" || { echo "❌ dashboard.html missing"; exit 1; }
        [ -f "./frontend/script.js" ] && echo "✅ script.js" || { echo "❌ script.js missing"; exit 1; }
        [ -f "./frontend/style.css" ] && echo "✅ style.css" || { echo "❌ style.css missing"; exit 1; }
        
        echo "🎉 All required files present!"
        
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate-backend, validate-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        tags: writeitdown-app:ci-test
        load: true
        # Don't fail the build on cache issues
        no-cache: false
        
    - name: Test Docker image
      run: |
        echo "🐳 Testing Docker image..."
        # Just verify the image can be created and basic node works
        docker run --rm writeitdown-app:ci-test node -e "console.log('✅ Docker Node environment works')"
        echo "✅ Docker image test passed"